<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Welcome to Rg Home</title>
    <link>https://laohanlinux.github.io/</link>
    <description>Recent content on Welcome to Rg Home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 10 Apr 2019 11:04:56 +0800</lastBuildDate>
    
	<atom:link href="https://laohanlinux.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>GoType of GoRuntime</title>
      <link>https://laohanlinux.github.io/2019/04/10/gotype-of-goruntime/</link>
      <pubDate>Wed, 10 Apr 2019 11:04:56 +0800</pubDate>
      
      <guid>https://laohanlinux.github.io/2019/04/10/gotype-of-goruntime/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Const Value of GoRuntime</title>
      <link>https://laohanlinux.github.io/2019/04/10/const-value-of-goruntime/</link>
      <pubDate>Wed, 10 Apr 2019 01:32:19 +0800</pubDate>
      
      <guid>https://laohanlinux.github.io/2019/04/10/const-value-of-goruntime/</guid>
      <description>最近在看Go Runtime源码的时候，发现很多字面量，比较有意思。 PtrSize = 4 1 2 const PtrSize = 4 &amp;lt;&amp;lt; (^uintptr(0) &amp;gt;&amp;gt; 64) // unsafe.Sizeof(uintptr(0)) but an ideal const bucketCntBits = 3 桶个数占位数 bucketCnt = 1 &amp;lt;&amp;lt; bucketCntBits = 8 桶个</description>
    </item>
    
    <item>
      <title>Timer of GoRuntime</title>
      <link>https://laohanlinux.github.io/2019/04/05/timer-of-goruntime/</link>
      <pubDate>Fri, 05 Apr 2019 23:18:10 +0800</pubDate>
      
      <guid>https://laohanlinux.github.io/2019/04/05/timer-of-goruntime/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Lock and RwLock of GoRuntime</title>
      <link>https://laohanlinux.github.io/2019/04/05/lock-and-rwlock-of-goruntime/</link>
      <pubDate>Fri, 05 Apr 2019 23:17:52 +0800</pubDate>
      
      <guid>https://laohanlinux.github.io/2019/04/05/lock-and-rwlock-of-goruntime/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Select of GoRuntime</title>
      <link>https://laohanlinux.github.io/2019/04/05/select-of-goruntime/</link>
      <pubDate>Fri, 05 Apr 2019 23:17:34 +0800</pubDate>
      
      <guid>https://laohanlinux.github.io/2019/04/05/select-of-goruntime/</guid>
      <description></description>
    </item>
    
    <item>
      <title>SyncMap of GoRuntime</title>
      <link>https://laohanlinux.github.io/2019/04/05/syncmap-of-goruntime/</link>
      <pubDate>Fri, 05 Apr 2019 23:17:20 +0800</pubDate>
      
      <guid>https://laohanlinux.github.io/2019/04/05/syncmap-of-goruntime/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Map of GoRuntime</title>
      <link>https://laohanlinux.github.io/2019/04/05/map-of-goruntime/</link>
      <pubDate>Fri, 05 Apr 2019 23:17:15 +0800</pubDate>
      
      <guid>https://laohanlinux.github.io/2019/04/05/map-of-goruntime/</guid>
      <description>View GoMap实际上就是一个hashTable，数据存储在数组buckets中。每个bucket包含 8 个键值对。hash的低8位用于映射buc</description>
    </item>
    
    <item>
      <title>Slice of GoRuntime</title>
      <link>https://laohanlinux.github.io/2019/04/05/slice-of-goruntime/</link>
      <pubDate>Fri, 05 Apr 2019 23:17:07 +0800</pubDate>
      
      <guid>https://laohanlinux.github.io/2019/04/05/slice-of-goruntime/</guid>
      <description>Overview array 底层指向数组的指针，是一块连续的空间 len 大小 cap 容量 New slice mallocgc Dilatation slice比较有意思的是扩容阶段，slice到底是以怎样的方式进行扩容的呢？ 主要</description>
    </item>
    
    <item>
      <title>Channel of GoRuntime</title>
      <link>https://laohanlinux.github.io/2019/04/05/channel-of-goruntime/</link>
      <pubDate>Fri, 05 Apr 2019 23:03:22 +0800</pubDate>
      
      <guid>https://laohanlinux.github.io/2019/04/05/channel-of-goruntime/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Goroutine Shedule of GoRuntime</title>
      <link>https://laohanlinux.github.io/2019/04/05/gorountine-shedule-of-goruntime/</link>
      <pubDate>Fri, 05 Apr 2019 23:02:34 +0800</pubDate>
      
      <guid>https://laohanlinux.github.io/2019/04/05/gorountine-shedule-of-goruntime/</guid>
      <description>GopherCon 2018: Kavya Joshi - The Scheduler Saga</description>
    </item>
    
    <item>
      <title>Garbage Recycle Algorithms of GoRuntime</title>
      <link>https://laohanlinux.github.io/2019/04/05/garbage-recycle-algorithms-of-goruntime/</link>
      <pubDate>Fri, 05 Apr 2019 23:01:48 +0800</pubDate>
      
      <guid>https://laohanlinux.github.io/2019/04/05/garbage-recycle-algorithms-of-goruntime/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Travel of Singapore</title>
      <link>https://laohanlinux.github.io/2019/04/05/travel-of-singapore/</link>
      <pubDate>Fri, 05 Apr 2019 17:48:26 +0800</pubDate>
      
      <guid>https://laohanlinux.github.io/2019/04/05/travel-of-singapore/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Travel of Hong Kong </title>
      <link>https://laohanlinux.github.io/2019/04/05/travel-of-hong-kong/</link>
      <pubDate>Fri, 05 Apr 2019 17:47:18 +0800</pubDate>
      
      <guid>https://laohanlinux.github.io/2019/04/05/travel-of-hong-kong/</guid>
      <description>Pic 尖沙咀 King&amp;rsquo;s Park 巴士比较久，街道也比较旧. 肯德基，可乐12HK，价格和内地一样 网红店，可惜人多，懒得排队 炸大肠不错，老板娘挺会做生意的，吃了差不</description>
    </item>
    
    <item>
      <title>TiKV Talent Plan</title>
      <link>https://laohanlinux.github.io/2019/04/05/tikv-talent-plan/</link>
      <pubDate>Fri, 05 Apr 2019 01:58:00 +0800</pubDate>
      
      <guid>https://laohanlinux.github.io/2019/04/05/tikv-talent-plan/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Embark on a New Journey</title>
      <link>https://laohanlinux.github.io/2019/04/04/embark-on-a-new-journey/</link>
      <pubDate>Thu, 04 Apr 2019 17:20:45 +0800</pubDate>
      
      <guid>https://laohanlinux.github.io/2019/04/04/embark-on-a-new-journey/</guid>
      <description>好久没写博客了，整个人快要废了，是时候改写东西了。Flag立得有点晚，希望能来得急. Golang [] Memory Manage [] GC [] Schedule [] Lock/RWLock [] Channel [] Select [] Map/SyncMap [] Slice Distribute System [] Tikv [] Use Tikv to design a</description>
    </item>
    
    <item>
      <title>Nothing</title>
      <link>https://laohanlinux.github.io/about/</link>
      <pubDate>Thu, 04 Apr 2019 13:07:28 +0800</pubDate>
      
      <guid>https://laohanlinux.github.io/about/</guid>
      <description>Talk is cheap, Show me the code.</description>
    </item>
    
    <item>
      <title>Rocket Girls</title>
      <link>https://laohanlinux.github.io/2019/04/04/rocket-girls/</link>
      <pubDate>Thu, 04 Apr 2019 00:45:37 +0800</pubDate>
      
      <guid>https://laohanlinux.github.io/2019/04/04/rocket-girls/</guid>
      <description>2019/03/30看了人生中的第一场演唱会，总体来说，比较满足，唯一不爽的是坐得太远了，看不清！😂应该买前排的，涨涨经验也好，起码得携带个</description>
    </item>
    
    <item>
      <title>Memory Manager of GoRuntime</title>
      <link>https://laohanlinux.github.io/2019/02/06/memory-manager-of-goruntime/</link>
      <pubDate>Wed, 06 Feb 2019 11:49:52 +0800</pubDate>
      
      <guid>https://laohanlinux.github.io/2019/02/06/memory-manager-of-goruntime/</guid>
      <description>前言 Go内存管理是runtime比较重要的一部分，Go内存管理算法来至于TCMalloc，非常类似。tcmalloc已经发展好长一段时间了，</description>
    </item>
    
    <item>
      <title>ShangHai Work Life</title>
      <link>https://laohanlinux.github.io/2018/01/25/shanghai-work-life/</link>
      <pubDate>Thu, 25 Jan 2018 22:21:48 +0800</pubDate>
      
      <guid>https://laohanlinux.github.io/2018/01/25/shanghai-work-life/</guid>
      <description>First Snow 小区内 公园 实在是太漂亮，忍不住去公园看看&amp;hellip; 很安静，没人 不知道什么时候才有机会看到这些风景了 Video 第一真正意义看到雪，很漂亮，虽</description>
    </item>
    
    <item>
      <title>raft源码分析</title>
      <link>https://laohanlinux.github.io/2017/09/11/raft%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Mon, 11 Sep 2017 12:08:30 +0000</pubDate>
      
      <guid>https://laohanlinux.github.io/2017/09/11/raft%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>这篇文章主要是从源码的级别来看Raft算法的实现。在网上找到了一个简化版：源码. 一个Server结构代表Raft网络中的一个节点。节点会创建</description>
    </item>
    
    <item>
      <title>200行区块链-go语言版本</title>
      <link>https://laohanlinux.github.io/2017/03/12/200%E8%A1%8C%E5%8C%BA%E5%9D%97%E9%93%BE-go%E8%AF%AD%E8%A8%80%E7%89%88%E6%9C%AC/</link>
      <pubDate>Sun, 12 Mar 2017 23:46:57 +0000</pubDate>
      
      <guid>https://laohanlinux.github.io/2017/03/12/200%E8%A1%8C%E5%8C%BA%E5%9D%97%E9%93%BE-go%E8%AF%AD%E8%A8%80%E7%89%88%E6%9C%AC/</guid>
      <description>1 talk is cheap, show me the code! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62</description>
    </item>
    
    <item>
      <title>goim源码剖析</title>
      <link>https://laohanlinux.github.io/2016/12/22/goim%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</link>
      <pubDate>Thu, 22 Dec 2016 00:47:22 +0000</pubDate>
      
      <guid>https://laohanlinux.github.io/2016/12/22/goim%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</guid>
      <description>Comet comet为用户代理服务器，用于客户端的连接，根据情况可部署多个comet(部署机房选择以用户接入为基础，如：最近接入、按运营商接入)。 流</description>
    </item>
    
    <item>
      <title>Riak Core 原理分析-1</title>
      <link>https://laohanlinux.github.io/2016/06/13/riak-core-%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90-1/</link>
      <pubDate>Mon, 13 Jun 2016 23:38:23 +0000</pubDate>
      
      <guid>https://laohanlinux.github.io/2016/06/13/riak-core-%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90-1/</guid>
      <description></description>
    </item>
    
    <item>
      <title>使用Golang语言实现一个简单的Bitcask引擎的文件存储系统</title>
      <link>https://laohanlinux.github.io/2016/04/25/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84bitcask%E5%BC%95%E6%93%8E%E7%9A%84%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Mon, 25 Apr 2016 23:45:22 +0000</pubDate>
      
      <guid>https://laohanlinux.github.io/2016/04/25/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84bitcask%E5%BC%95%E6%93%8E%E7%9A%84%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F/</guid>
      <description>bitcask是bashro的设计的一个底层存储引擎，主要应用于Riak产品中（ps:国内的beansdb的底层存储引擎也是使用bitcas</description>
    </item>
    
    <item>
      <title>使用raft算法快速构建一个分布式kv系统</title>
      <link>https://laohanlinux.github.io/2016/04/25/%E4%BD%BF%E7%94%A8raft%E7%AE%97%E6%B3%95%E5%BF%AB%E7%86%9F%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%88%86%E5%B8%83%E5%BC%8F%E7%9A%84key-value%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Mon, 25 Apr 2016 23:44:25 +0000</pubDate>
      
      <guid>https://laohanlinux.github.io/2016/04/25/%E4%BD%BF%E7%94%A8raft%E7%AE%97%E6%B3%95%E5%BF%AB%E7%86%9F%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%88%86%E5%B8%83%E5%BC%8F%E7%9A%84key-value%E7%B3%BB%E7%BB%9F/</guid>
      <description>raft是一种类似于paoxs的分布式算法，相对于paxos算法，raft更容易于理解以及实现，这也是一种典型的半数协议算法。这里不详细介绍</description>
    </item>
    
    <item>
      <title>erlang学习笔记</title>
      <link>https://laohanlinux.github.io/2016/04/25/erlang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Mon, 25 Apr 2016 00:15:14 +0000</pubDate>
      
      <guid>https://laohanlinux.github.io/2016/04/25/erlang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>erlang 之简单的Diction实现 最近在看学erlang ，看到了字典这个demo ，把程序Copy出来和大家分享一下 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16</description>
    </item>
    
    <item>
      <title>paxos</title>
      <link>https://laohanlinux.github.io/2016/03/30/paxos/</link>
      <pubDate>Wed, 30 Mar 2016 21:04:29 +0000</pubDate>
      
      <guid>https://laohanlinux.github.io/2016/03/30/paxos/</guid>
      <description>本文的内容源至&amp;ndash;知行学社V. http://www.tudou.com/programs/view/e8zM8dAL6hM/ Paxos 的理解困境 Paxos究竟在解决什么问题？ Paxos如何在分布式存储系统中应用？ Paxos算法的核</description>
    </item>
    
    <item>
      <title>estatbox_crdts</title>
      <link>https://laohanlinux.github.io/2016/03/26/estatbox-crdts/</link>
      <pubDate>Sat, 26 Mar 2016 22:22:53 +0000</pubDate>
      
      <guid>https://laohanlinux.github.io/2016/03/26/estatbox-crdts/</guid>
      <description>EStateBox GitHub estatebox 参照于statebox实现的，主要用来解决在分布式中的版本冲突问题,Dynamo算法中，CRDTs (Conflict-free Replicated Data Types)是一种比较好的解决</description>
    </item>
    
    <item>
      <title>SFS Store 一种简单应用存储架构</title>
      <link>https://laohanlinux.github.io/2016/03/24/sfs-store-%E4%B8%80%E7%A7%8D%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8%E5%AD%98%E5%82%A8%E6%9E%B6%E6%9E%84/</link>
      <pubDate>Thu, 24 Mar 2016 23:02:34 +0000</pubDate>
      
      <guid>https://laohanlinux.github.io/2016/03/24/sfs-store-%E4%B8%80%E7%A7%8D%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8%E5%AD%98%E5%82%A8%E6%9E%B6%E6%9E%84/</guid>
      <description>sfs store 全称为simple file system store，是一个应用层存储系统的抽象，其接口类似于亚马逊的s3存储系统，对外全部提供http接口. 满足一般的中小</description>
    </item>
    
    <item>
      <title>Linux epoll</title>
      <link>https://laohanlinux.github.io/2016/03/20/epoll/</link>
      <pubDate>Sun, 20 Mar 2016 11:54:32 +0000</pubDate>
      
      <guid>https://laohanlinux.github.io/2016/03/20/epoll/</guid>
      <description>epoll epoll是一种事件驱动的io模式，epoll不仅可以应用在网络io上，时钟也是适用，得益于linux/Unix的一切皆为文件理论。这也意</description>
    </item>
    
    <item>
      <title>raft算法</title>
      <link>https://laohanlinux.github.io/2016/03/13/raft%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sun, 13 Mar 2016 22:19:30 +0000</pubDate>
      
      <guid>https://laohanlinux.github.io/2016/03/13/raft%E7%AE%97%E6%B3%95/</guid>
      <description>Raft 算法小结 raft 算法的主要模块： 选举 关系更新 日志复制 日志压缩 选举 raft为了避免操作混乱，使用了Quorom ， 一种强领导的方式，所有的写操作到由</description>
    </item>
    
    <item>
      <title>riak core 导读</title>
      <link>https://laohanlinux.github.io/2016/03/13/riak-core-guide/</link>
      <pubDate>Sun, 13 Mar 2016 22:13:13 +0000</pubDate>
      
      <guid>https://laohanlinux.github.io/2016/03/13/riak-core-guide/</guid>
      <description>这一部分的文章整理主要参照于 try-try-try 和 书写是对思维的缓存 / 好记性不如烂博客 http://cryolite.iteye.com/ Riak Core Guide Riak Core 并不会涉及到数据的物理存储， demo参照 【try try try】的</description>
    </item>
    
    <item>
      <title>udon_riak_core</title>
      <link>https://laohanlinux.github.io/2016/03/13/udon-riak-core/</link>
      <pubDate>Sun, 13 Mar 2016 22:10:52 +0000</pubDate>
      
      <guid>https://laohanlinux.github.io/2016/03/13/udon-riak-core/</guid>
      <description>最近要做文件分片传输的接口，起初是想分片容灾的，有不想借助第三方存储中间状态，有可以自动扩展接口服务能力，是试下一下，riak core 刚好可以满足</description>
    </item>
    
    <item>
      <title>muduo net library chapter 3</title>
      <link>https://laohanlinux.github.io/2015/07/01/muduo-net-library-chapter-3/</link>
      <pubDate>Wed, 01 Jul 2015 00:24:59 +0000</pubDate>
      
      <guid>https://laohanlinux.github.io/2015/07/01/muduo-net-library-chapter-3/</guid>
      <description>[34] TcpServer/TcpConnection 1 2 3 4 Acceptor类的主要功能是socket、bind、listen 般来说，在上层应用程序中，我们不直接使用Acceptor，而是</description>
    </item>
    
    <item>
      <title>muduo net library chapter 2</title>
      <link>https://laohanlinux.github.io/2015/07/01/muduo-net-library-chapter-2/</link>
      <pubDate>Wed, 01 Jul 2015 00:15:03 +0000</pubDate>
      
      <guid>https://laohanlinux.github.io/2015/07/01/muduo-net-library-chapter-2/</guid>
      <description>[30] EventLoopThread 任何一个线程，只要创建并运行了EventLoop，都称之为IO线程 IO线程不一定是主线程 muduo并发模型one loop per thread + threadpool 为了方便今后使</description>
    </item>
    
    <item>
      <title>muduo net library chapter 1</title>
      <link>https://laohanlinux.github.io/2015/07/01/muduo-net-library-chapter-1/</link>
      <pubDate>Wed, 01 Jul 2015 00:04:49 +0000</pubDate>
      
      <guid>https://laohanlinux.github.io/2015/07/01/muduo-net-library-chapter-1/</guid>
      <description>[25] muduo_net库源码分析 TCP网络编程本质 TCP网络编程最本质是的处理三个半事件 连接建立：服务器accept（被动）接受连接，客户端c</description>
    </item>
    
    <item>
      <title>cowboy</title>
      <link>https://laohanlinux.github.io/2015/04/25/cowboy/</link>
      <pubDate>Sat, 25 Apr 2015 22:59:40 +0000</pubDate>
      
      <guid>https://laohanlinux.github.io/2015/04/25/cowboy/</guid>
      <description>Cowboy 启动流程 Initialization 首先， init函数会被调用，所有的处理都会调用该函数。如果使用rest处理当前的请求，那么这个函数必须返回upgrade 1 2 [init({tcp, http},</description>
    </item>
    
    <item>
      <title>muduo simple example</title>
      <link>https://laohanlinux.github.io/2014/07/01/muduo-simple-example/</link>
      <pubDate>Tue, 01 Jul 2014 01:22:24 +0000</pubDate>
      
      <guid>https://laohanlinux.github.io/2014/07/01/muduo-simple-example/</guid>
      <description>[42] 四个 服务器设计模型 五个简单TCP协议（MuduoManual.pdf P50） muduo库网络模型使用示例（sudoku求解服务器Muduo</description>
    </item>
    
    <item>
      <title>muduo_base_library_2</title>
      <link>https://laohanlinux.github.io/2013/06/10/muduo-base-library-2/</link>
      <pubDate>Mon, 10 Jun 2013 12:43:39 +0000</pubDate>
      
      <guid>https://laohanlinux.github.io/2013/06/10/muduo-base-library-2/</guid>
      <description>[1] Timestamp 计算机从1970-01-01开始时间计算 ， 但目前的经过的时间秒 假设等于microSecondsSinceEpoch_ ， 把microSec</description>
    </item>
    
    <item>
      <title>muduo_base_library_1</title>
      <link>https://laohanlinux.github.io/2013/06/10/muduo-base-library-1/</link>
      <pubDate>Mon, 10 Jun 2013 01:09:28 +0000</pubDate>
      
      <guid>https://laohanlinux.github.io/2013/06/10/muduo-base-library-1/</guid>
      <description>Muduo Base Library 面向对象编程 面向对象也就是把对象作为接口暴露出去，一般内部是一个接口或者抽象类。 source code Thread.h 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24</description>
    </item>
    
  </channel>
</rss>